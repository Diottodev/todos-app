name: CI-CD-APP

on:
  push:
    branches: [master]
    paths-ignore:
      - "README.md"
      - "backend/README.md"
      - "frontend/README.md"
  pull_request:
    branches: [master]
    paths-ignore:
      - "README.md"
      - "backend/README.md"
      - "frontend/README.md"
  workflow_dispatch:

concurrency:
  group: deploy-production
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      NODE_ENV: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Clean install (backend)
        run: |
          cd backend
          rm -rf node_modules yarn.lock
          yarn cache clean
          yarn

      - name: Run prisma client
        run: cd backend && npx prisma generate

      - name: Run tests
        run: |
          cd backend
          yarn add -D @types/jest @types/mocha
          yarn add @nestjs/testing
          yarn test

      - name: Build API
        run: cd backend && yarn build

      - name: Set up Node.js (frontend)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies (frontend)
        run: cd frontend && yarn

      - name: Build frontend
        run: cd frontend && yarn build

  dockerize:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.api
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/todos-api:latest

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.front
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest

  deploy:
    needs: dockerize
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          debug: true
          script: |
            cd ~/todos-app
            git pull
            docker compose build
            docker compose up -d --remove-orphans
